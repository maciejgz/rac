package pl.mg.rac.commons.event;

import lombok.Getter;

@Getter
public enum EventType {

    //USER EVENTS
    RAC_USER_CREATED("RAC_USER_CREATED"),
    RAC_USER_DELETED("RAC_USER_DELETED"),
    RAC_USER_CHARGED("RAC_USER_CHARGED"),

    //CAR EVENTS
    RAC_CAR_CREATED("RAC_CAR_CREATED"),
    RAC_CAR_DELETED("RAC_CAR_DELETED"),
    RAC_CAR_RENT_SUCCESS("RAC_CAR_RENT_SUCCESS"),
    RAC_CAR_RENT_FAILED_ALREADY_RENTED("RAC_CAR_RENT_FAILED_ALREADY_RENTED"),
    RAC_CAR_RENT_FAILED_NOT_EXISTS("RAC_CAR_RENT_FAILED_NOT_EXISTS"),
    RAC_CAR_RETURN_SUCCESS("RAC_CAR_RETURN_SUCCESS"),
    RAC_CAR_RETURN_FAILED_ALREADY_RETURNED("RAC_CAR_RETURN_FAILED_ALREADY_RETURNED"),
    RAC_CAR_RETURN_FAILED_NOT_EXIST("RAC_CAR_RETURN_FAILED_NOT_EXIST"),

    //RENT EVENTS
    RAC_RENT_REQUEST_LOCATION("RAC_RENT_REQUEST_LOCATION"),
    RAC_RENT_REQUEST_USER("RAC_RENT_REQUEST_USER"),
    RAC_RENT_REQUEST_CAR("RAC_RENT_REQUEST_CAR"),
    RAC_RENT_CONFIRMATION("RAC_RENT_CONFIRMATION"),
    RAC_RENT_FAILED_USER("RAC_RENT_FAILED_USER"),
    RAC_RENT_FAILED_CAR("RAC_RENT_FAILED_CAR"),

    //RETURN EVENTS
    RAC_RETURN_REQUEST_LOCATION("RAC_RETURN_REQUEST_LOCATION"),
    RAC_RETURN_REQUEST_USER("RAC_RETURN_REQUEST_USER"),
    RAC_RETURN_REQUEST_CAR("RAC_RETURN_REQUEST_CAR"),
    RAC_RETURN_CONFIRMATION("RAC_RETURN_CONFIRMATION"),
    RAC_RETURN_FAILED_LOCATION("RAC_RETURN_FAILED_LOCATION"),
    RAC_RETURN_FAILED_USER("RAC_RETURN_FAILED_USER"),
    RAC_RETURN_FAILED_CAR("RAC_RETURN_FAILED_CAR"),

    //LOCATION CHANGE EVENTS
    RAC_LOCATION_USER_CHANGED("RAC_LOCATION_USER_CHANGED"),
    RAC_LOCATION_CAR_CHANGED("RAC_LOCATION_CAR_CHANGED"),
    ;

    private final String id;

    EventType(String id) {
        this.id = id;
    }

    public static EventType of(String id) {
        for (EventType eventType : EventType.values()) {
            if (eventType.id.equalsIgnoreCase(id)) {
                return eventType;
            }
        }
        throw new IllegalArgumentException("No EventType with id " + id + " found");
    }

}
